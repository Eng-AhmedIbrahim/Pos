@inject IJSRuntime Js
@inject ISnackbar Snackbar
@inject CommonProperties CommonProperties
@inject CartService _cartService

<MudTable Items="Items??[]" Dense="true" Hover="true" FixedHeader="true" CanCancelEdit="true"
CommitEditTooltip="Commit Edit"
OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))"
RowEditPreview="BackupItem"
RowEditCancel="ResetItemToOriginalValues"
RowEditCommit="ItemHasBeenCommitted"
ApplyButtonPosition="TableApplyButtonPosition.Start"
EditButtonPosition="TableEditButtonPosition.End"
EditTrigger="TableEditTrigger.RowClick"
RowClass="liner-grid-buttons">

    <HeaderContent>
        <MudTh Style="width: min-content; white-space: nowrap;font-weight:bold;color: #143155">Qty</MudTh>
        <MudTh Style="font-weight:bold;color: #143155">Name</MudTh>
        <MudTh Style="font-weight:bold;color: #143155">Price</MudTh>
        <MudTh Style="font-weight:bold;color: #143155">Total</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Qty" Style="width: min-content;" Class="table-style" @onclick="() => SelectItem(context)">
            <MudNumericField T="int" Value="context.Quantity" Min="1"
            Style="width: 60px;" Immediate="true"
            ValueChanged="(val) => UpdateQuantity(context, val)" />
        </MudTd>
        <MudTd DataLabel="Name" Class="table-style">@context.Name</MudTd>
        <MudTd DataLabel="Price" Class="table-style">@context.Price</MudTd>
        <MudTd DataLabel="Total" Class="table-style">@context.Total</MudTd>
    </RowTemplate>

    <ChildRowContent>
        @if (context.Attributes?.Any() == true)
        {
            <MudTr Class="attribute-row">
                <MudTd></MudTd>
                <MudTd ColSpan="3" Style="padding-top: 6px;padding-bottom: 0px;">
                    <div style="font-size: 12px; color:black;">
                        @foreach (var attr in context.Attributes)
                        {
                            <p class="attribute-name" style="margin-right: 0px; margin-bottom: 5px;">➤ @attr.Name</p>
                        }
                    </div>
                </MudTd>
            </MudTr>
        }
    </ChildRowContent>
</MudTable>

@code {

    protected override void OnInitialized()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        _cartService.OnChange += HandleCartServiceChange;
    }

    private async void HandleCartServiceChange()
    => await InvokeAsync(StateHasChanged);

    public void Dispose()
    => _cartService.OnChange -= HandleCartServiceChange;

    private async void BackupItem(object element)
    {
        var item = (TableItem)element;
        _elementBeforeEdit = new TableItem
            {
                Id = item.Id,
                Quantity = item.Quantity,
                Name = item.Name,
                Price = item.Price,
                Total = item.Total
        };

        Snackbar.Add("Backup Item Handler Invoked");

        await Js.InvokeVoidAsync("focusRow", $"row-{item.Name}");
    }

    private void ResetItemToOriginalValues(object element)
    {
        if (_elementBeforeEdit != null)
        {
            var item = (TableItem)element;
            item.Quantity = _elementBeforeEdit.Quantity;
            item.Name = _elementBeforeEdit.Name;
            item.Price = _elementBeforeEdit.Price;
            item.Total = _elementBeforeEdit.Total;
        }

        Snackbar.Add("Reset Item Handler Invoked");
    }

    private void ItemHasBeenCommitted(object element)
    {
        ((TableItem)element).Total =
            ((TableItem)element).Quantity * ((TableItem)element).Price;

        Snackbar.Add("Item Has Been Committed Handler Invoked");
    }

    private void UpdateQuantity(TableItem item, int newQuantity)
    {
        item.Quantity = newQuantity;
        item.Total = item.Quantity * item.Price;
        _cartService.CalculateTotalAmountFromTableItems(CommonProperties!.TableItems ?? []);
    }


    private void SelectItem(TableItem item)
     => _cartService.SetSelectedItem(item);

   
}

<style>

    .table-style {
        font-size: 14px;
        color: black;
        font-weight: bold;
    }

    .liner-grid-buttons {
        background: linear-gradient(135deg, #ffffff, #e7ecf5);
        color: #143155;
    }
</style>
